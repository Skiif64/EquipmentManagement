@using EquimentManagement.Contracts.Responses;
@using EquipmentManagement.UI.Abstractions;
@using EquipmentManagement.UI.Shared.Modal;
@using EquipmentManagement.UI.Shared.Tables

@page "/dangerzone/equipment";
@inject IEquipmentService EquipmentService;

@attribute [Authorize(Roles = "Admin")]
<h3>Удаление оборудования</h3>

<PagedTableBase TEntity="EquipmentResponse" Context="equipment" EntitySource="OnPageLoad" @ref="Table">
    <HeaderTemplate>
        <th>
                <span>Тип</span>
            </th>
            <th>
                <span>Артикул</span>
            </th>
            <th>
                <span>Серийный номер</span>
            </th>
            <th>
                <span>Описание</span>
            </th>
            <th>
                <span>Статус</span>
            </th>
            <th>

            </th>
    </HeaderTemplate>
    <RowTemplate>
        <td>
            <span>@equipment.Type</span>
        </td>
        <td>
            <span>@equipment.Article</span>
        </td>
        <td>
            <span>@equipment.SerialNumber</span>
        </td>
        <td>
            <textarea draggable="false"
                      readonly="readonly">@equipment.Description</textarea>
        </td>
        <td>
            <strong>@equipment.CurrentStatusTitle</strong>
            @if (equipment.EmployeeFullname is not null)
            {
                <span> (@equipment.EmployeeFullname)</span>
            }
        </td>
        <td>
            <button class="btn btn-danger"
            @onclick="async () => await OnDeleteRequestedAsync(equipment)">
                <span class="oi oi-trash"></span> Удалить
            </button> 
        </td>
    </RowTemplate>
</PagedTableBase>

@code {
    private const int PageSize = 20;
    [CascadingParameter]
    public IModalService Modal { get; set; } = null!;
    private PagedTableBase<EquipmentResponse> Table { get; set; } = null!;
    private async Task<PagedListResponse<EquipmentResponse>> OnPageLoad(int page = 1)
    {
        return await EquipmentService
        .GetAsync(page, PageSize, null);

    }

    private async Task OnDeleteRequestedAsync(EquipmentResponse equipment)
    {        
        var parameters = new ModalParameters()
        .Add(nameof(DangerDeleteModal.EntityName), $"({equipment.Article} {equipment.SerialNumber})")
        .Add(nameof(DangerDeleteModal.DangerMessage), "удаление всех записей, связанных с данным оборудованием");
        var modal = Modal.Show<DangerDeleteModal>("Внимание", parameters);
        var result = await modal.Result;
        if (result.Confirmed)
        {            
            await EquipmentService.DeleteAsync(equipment.Id);
            await Table.NotifyAsync();
            StateHasChanged();
        }
    }
}
