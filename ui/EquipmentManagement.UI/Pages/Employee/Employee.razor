@using EquimentManagement.Contracts.Responses;
@using EquipmentManagement.UI.Abstractions;
@using EquipmentManagement.UI.Shared.Modal;
@using EquipmentManagement.UI.Shared.Tables
@attribute [Route(PagePaths.Employee.List)]
@inject IEmployeeService EmployeeService;
@inject IEquipmentService EquipmentService;
@inject NavigationManager Navigation;
@attribute [Authorize]


<div class="container">
    <div class="row justify-content-around align-content-start">
        <h3>Сотрудники</h3>
        <div class="my-2 p-2">
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <NavLink class="btn btn-primary align-self-start"
                             href="/employee/add">Добавить соотрудника</NavLink>
                </Authorized>
            </AuthorizeView>
        </div>

        <div class="input-group rounded">
            <div class="d-flex flex-row">
                <span class="input-group-text border-0" id="search-addon">
                    <i class="oi oi-magnifying-glass"></i>
                </span>
                <input type="search" class="form-control rounded" placeholder="Поиск" aria-label="Search" aria-describedby="search-addon"
                       @oninput="OnSearchBarInput" />
            </div>
        </div>

        <PagedTableBase TEntity="EmployeeResponse" Context="employee" EntitySource="LoadPageAsync" @ref="Table">
            <HeaderTemplate>                
                    <th>
                        <div class="d-flex w-100">
                            <span class="text-center">ФИО</span>
                        </div>
                    </th>
                    <th>
                        <span class="text-center">Статус</span>
                    </th>
                    <th>
                        <div class="d-flex w-100">
                            <span class="text-center">Действия</span>
                        </div>
                    </th>                
            </HeaderTemplate>
            <RowTemplate>                
                    <td>
                        <span>@employee.Lastname @employee.Firstname @employee.Patronymic</span>
                    </td>
                    <td>
                        <span>@(employee.Status == EmployeeStatusResponse.Active ? "Активен" : "Уволен")</span>
                    </td>
                    <td>
                        <AuthorizeView Roles="Admin">
                            <Authorized>
                                @if (employee.Status is not EmployeeStatusResponse.Fired)
                                {
                                    <button class="btn btn-danger"
                                    @onclick="async () => await OnShowDeleteModalRequested(employee)">
                                        <span class="oi oi-trash"></span> Уволить
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-danger"
                                    @onclick="async () => await OnShowRestoreModalRequested(employee)">
                                        <span class="oi oi-trash"></span> Восстановить
                                    </button>
                                }
                                <button class="btn btn-primary"
                                @onclick="() => OnEditEmployeeRequested(employee)">
                                    <span class="oi oi-pencil"></span> Изменить
                                </button>
                            </Authorized>
                        </AuthorizeView>
                        <button class="btn btn-secondary"
                        @onclick="() => OnNavigateToEmployeeEquipmentRequested(employee)">
                            <span class="oi oi-list-rich"></span> Оборудование
                        </button>
                    </td>                
            </RowTemplate>
        </PagedTableBase>
    </div>
</div>
    
@code {
    private string? searchQuery;
    [CascadingParameter]
    public IModalService Modal { get; set; } = null!;
    [Parameter]
    public PagedTableBase<EmployeeResponse> Table { get; set; } = null!;

    private async Task OnShowDeleteModalRequested(EmployeeResponse employee)
    {
        if (await HasEquipment(employee))
        {
            await ShowErrorModal();
            return;
        }

        var options = new ModalOptions { HideCloseButton = true };
        var fullname = $"{employee.Lastname} {employee.Firstname} {employee.Patronymic}";
        var parameters = new ModalParameters()
        .Add(nameof(DeleteModal.EntityName), fullname);

        var modal = Modal.Show<DeleteModal>("Удаление сотрудника", parameters, options);
        var result = await modal.Result;
        if (result.Confirmed)
            await DeleteSelectedEmployee(employee);
    }

    private async Task OnSearchBarInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString();
        await Table.NotifyAsync();
    }

    private async Task<PagedListResponse<EmployeeResponse>> LoadPageAsync(int page = 1)
    {
        return await EmployeeService.GetAsync(page, 20, searchQuery);
    }

    private async Task OnShowRestoreModalRequested(EmployeeResponse employee)
    {       

        var options = new ModalOptions { HideCloseButton = true };
        var fullname = $"{employee.Lastname} {employee.Firstname} {employee.Patronymic}";
        var parameters = new ModalParameters()
        .Add(nameof(RestoreModal.EntityName), fullname);

        var modal = Modal.Show<RestoreModal>("Восстановление сотрудника", parameters, options);
        var result = await modal.Result;
        if (result.Confirmed)
            await RestoreSelectedEmployee(employee);
    }


    private async Task DeleteSelectedEmployee(EmployeeResponse employee)
    {
        await EmployeeService.FireAsync(employee.Id);
        await Table.NotifyAsync();
    }

    private async Task RestoreSelectedEmployee(EmployeeResponse employee)
    {      
        await EmployeeService.RestoreAsync(employee.Id);
        await Table.NotifyAsync();
    }

    private async Task<bool> HasEquipment(EmployeeResponse employee)
    {
        var equipments = await EquipmentService.GetByEmployeeIdAsync(employee.Id);
        if (equipments!.Any())
            return true;
        return false;
    }

    private async Task ShowErrorModal()
    {
        var message = "За данным сотрудником есть закрепленное оборудование.";
        var options = new ModalOptions
            {
                HideCloseButton = true
            };
        var parameters = new ModalParameters()
        .Add(nameof(ErrorModal.ErrorMessage), message);
        var modal = Modal.Show<ErrorModal>("Внимание", parameters, options);
        await modal.Result;
    }

    private void OnNavigateToEmployeeEquipmentRequested(EmployeeResponse employee)
    {
        Navigation.NavigateTo($"{PagePaths.Equipment.EmployeeEquipment}?id={employee.Id}");
    }

    private void OnEditEmployeeRequested(EmployeeResponse employee)
    {
        Navigation.NavigateTo(PagePaths.Employee.Edit + $"/{employee.Id}");
    }
}
