@attribute [Route(PagePaths.Employee.List)]
@inject IEmployeeService EmployeeService;
@inject NavigationManager Navigation;
@attribute [Authorize]
@using EquimentManagement.Contracts.Responses;
@using EquipmentManagement.UI.Abstractions;
@using System.Collections.ObjectModel;
@using EquipmentManagement.UI.Shared.Modal;
@using Microsoft.AspNetCore.Components.Authorization

<div class="container">
    <div class="row justify-content-around align-content-start">
        <h3>Сотрудники</h3>
        <div class="my-2 p-2">
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <NavLink class="btn btn-primary align-self-start"
                             href="/employee/add">Добавить соотрудника</NavLink>
                </Authorized>
            </AuthorizeView>
        </div>

    </div>
</div>
    @if (employees is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    <span class="text-center">ФИО</span>
                </th>
                <th>

                </th>
            </tr>
        </thead>
        <tbody>

            @foreach (var employee in employees)
            {
                <tr>
                    <td>
                        <span>@employee.Lastname @employee.Firstname @employee.Patronymic</span>
                    </td>
                    <td>
                        <AuthorizeView Roles="Admin">
                            <Authorized>
                                <button class="btn btn-danger"
                                @onclick="() => ShowDeleteModal(employee)">
                                    Удалить
                                </button>
                                <button class="btn btn-secondary">
                                    Изменить
                                </button>
                            </Authorized>
                        </AuthorizeView>
                        <button class="btn btn-secondary"
                        @onclick="() => NavigateToEmployeeEquipment(employee.Id)">
                            Оборудование
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="d-flex">
        <div class="my-auto mx-auto">
            <LoadingCircle />
        </div>
    </div>
}
@code {
    private ObservableCollection<EmployeeResponse>? employees;
    private EmployeeResponse? selectedEmployee;
    [CascadingParameter]
    public IModalService Modal { get; set; } = null!;
    protected override async Task OnInitializedAsync()
    {
        await LoadEmployeesAsync();
    }

    private async Task LoadEmployeesAsync()
    {
        var response = await EmployeeService.GetAllAsync();
        if (response is not null)
        {
            employees = new ObservableCollection<EmployeeResponse>(response);
            employees.CollectionChanged += (sender, e) => StateHasChanged();

        }
    }

    private async Task ShowDeleteModal(EmployeeResponse? employee)
    {
        selectedEmployee = employee;
        var options = new ModalOptions { HideCloseButton = true };
        var fullname = $"{employee?.Lastname} {employee?.Firstname} {employee?.Patronymic}";
        var parameters = new ModalParameters()
        .Add(nameof(DeleteModal.EntityName), fullname);

        var modal = Modal.Show<DeleteModal>("Удаление сотрудника", parameters, options);
        var result = await modal.Result;
        if (result.Confirmed)
            await DeleteSelectedEmployee();
    }


    private async Task DeleteSelectedEmployee()
    {
        if (selectedEmployee is null)
            return;
        employees?.Remove(selectedEmployee);
        var employeeId = selectedEmployee.Id;

        await EmployeeService.DeleteAsync(employeeId);

    }

    public void NavigateToEmployeeEquipment(Guid employeeId)
    {
        Navigation.NavigateTo($"{PagePaths.Equipment.EmployeeEquipment}?id={employeeId}");
    }
}
