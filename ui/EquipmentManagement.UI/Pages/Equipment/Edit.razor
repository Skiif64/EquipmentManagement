@attribute [Route(PagePaths.Equipment.Edit)]
@attribute [Route(PagePaths.Equipment.Edit + "/{equipmentId:guid}")]
@using EquimentManagement.Contracts.Requests;
@using System.Collections.ObjectModel;
@using System.Net.Http.Headers;
@using EquimentManagement.Contracts.Responses;
@using EquipmentManagement.UI.Abstractions;
@using EquipmentManagement.UI.Services;
@using EquipmentManagement.UI.Shared.Modal;
@inject NavigationManager Navigation;
@inject ImageService ImageService;
@inject IEquipmentService EquipmentService;
@inject IEquipmentTypeService TypeService;
@attribute [Authorize(Roles = "Admin")]

@if (equipment is not null)
{
    <div class="container">
        <div class="row">
            <div class="align-content-center justify-content-center">
                <h3>Изменение оборудования</h3>
                <EditForm Model="@request"
                      OnValidSubmit="@OnValidSubmitAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <label class="form-label">Тип</label>
                        <div class="d-flex">
                            <button type="button" class="btn btn-primary me-auto"
                                @onclick="ShowAddTypeModalAsync">
                                <span class="oi oi-plus"></span>
                            </button>
                            <InputSelect class="form-select ms-1" @bind-Value="request.TypeId">
                                <option selected hidden value="@equipment.TypeId">@equipment.Type</option>
                                @if (types is not null)
                                {
                                    foreach (var type in types)
                                    {
                                        <option value="@type.Id">@type.Name</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Артикул</label>
                        <InputText class="form-control"
                               @bind-Value="@request.Article"></InputText>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Серийный номер</label>
                        <InputText class="form-control"
                               @bind-Value="@request.SerialNumber"></InputText>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Описание</label>
                        <InputTextArea class="form-control"
                                   @bind-Value="@request.Description"></InputTextArea>
                    </div>
                    <div class="mb-3 h-25">
                        <label class="form-label">Фото</label>
                        <div class="p-2 d-flex justify-content-start w-100 bg-light">
                            @foreach (var source in sources)
                            {
                                <ImageThumb Source="@source" Alt="Фото" />
                            }
                        </div>
                        <InputFile multiple OnChange="LoadFileAsync"></InputFile>
                    </div>
                    <div class="mb-3">
                        <button type="submit"
                                class="btn btn-primary">
                            Обновить
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}
@code {
    private const string ImageApiPath = "/api/image";
    private static readonly string[] AllowedExtensions = new[] { ".png", ".jpeg", ".jpg" };
    private ObservableCollection<EquipmentTypeResponse>? types;
    private UpdateEquipmentRequest request = new();
    private EquipmentResponse? equipment;
    private ObservableCollection<UploadedFile> uploadedFiles = new();
    private List<string> sources = new();
    private List<string> imagesToRemove = new();
    [Parameter]
    public Guid EquipmentId { get; set; }
    [CascadingParameter]
    private IModalService Modal { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        uploadedFiles.CollectionChanged += (s, e) => StateHasChanged();
    }

    private async Task LoadDataAsync()
    {
        var response = await TypeService.GetAllAsync();
        types = new ObservableCollection<EquipmentTypeResponse>(response);
        types.CollectionChanged += (s, e) => StateHasChanged();
        equipment = await EquipmentService.GetByIdAsync(EquipmentId);
        if (equipment is null)
            return;
        request.TypeId = equipment.TypeId;
        request.EquipmentId = equipment.Id;
        request.Author = equipment.Author;
        request.Article = equipment.Article;
        request.SerialNumber = equipment.SerialNumber;
        request.Description = equipment.Description;        
        sources.AddRange(equipment.ImageNames.Select(img
            => ImageApiPath + "/" + img));
    }

    private async Task OnValidSubmitAsync()
    {
        if (imagesToRemove.Count != 0)
        {
            await ImageService.RemoveImagesAsync(new DeleteImagesRequest
                {
                    EquipmentId = request.EquipmentId,
                    ImageNames = imagesToRemove
                });
        }
        if (uploadedFiles.Count > 0)
        {
            var imageNames = await ImageService.AddImagesAsync(uploadedFiles);
            request.NewImages = imageNames;
        }
        await EquipmentService.UpdateAsync(request);

        Navigation.NavigateTo(PagePaths.Equipment.List);

    }

    private async Task ShowAddTypeModalAsync()
    {
        var modal = Modal.Show<AddTypeModal>("Добавление нового типа");
        var result = await modal.Result;
        if (result.Confirmed)
        {
            var id = await TypeService.AddAsync((AddEquipmentTypeRequest)result.Data!);
            var newType = await TypeService.GetByIdAsync(id);
            types?.Add(newType!);
        }
    }

    private async Task LoadFileAsync(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            if (!AllowedExtensions.Any(x
                => Path.GetExtension(file.Name).ToLowerInvariant() == x))
            {
                await ShowErrorModal();
                return;
            }
            uploadedFiles.Add(new UploadedFile(file));
            using var ms = new MemoryStream();
            await file.OpenReadStream(int.MaxValue).CopyToAsync(ms);
            var source = $"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}";
            sources.Add(source);
        }
    }

    private async Task ShowErrorModal()
    {
        var parameters = new ModalParameters()
        .Add(nameof(ErrorModal.ErrorMessage), "Разрешены изображения только с расширениями: "
        + string.Join(", ", AllowedExtensions));
        var modal = Modal.Show<ErrorModal>("Неверный формат изображения", parameters);
        var result = await modal.Result;
    }

    private void OnRemoveImage(string imageName)
    {
        if (imageName.StartsWith("data:"))
            sources.Remove(imageName);
        imagesToRemove.Add(imageName);
        request.ImageToRemove = imagesToRemove;
    }
}
