@page "/equipment/employee/"
@using EquimentManagement.Contracts.Responses;
@using System.Collections.ObjectModel;
@using EquipmentManagement.UI.Abstractions;
@inject IEmployeeService EmployeeService;
@inject IEquipmentService EquipmentService;
@attribute [Authorize]

@if (employee is not null)
{
    <h4>Оборудование сотрудника @employee.Lastname @employee.Firstname @employee.Patronymic</h4>
}

@if (equipments is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    <span>Тип</span>
                </th>
                <th>
                    <span>Артикул</span>
                </th>
                <th>
                    <span>Серийный номер</span>
                </th>
                <th>
                    <span>Описание</span>
                </th>
            </tr>
        </thead>
        <tbody>

            @foreach (var equipment in equipments)
            {
                <tr>
                    <td>
                        <span>@equipment.Type</span>
                    </td>
                    <td>
                        <span>@equipment.Article</span>
                    </td>
                    <td>
                        <span>@equipment.SerialNumber</span>
                    </td>
                    <td>
                        <textarea readonly="readonly">@equipment.Description</textarea>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="d-flex">
        <div class="my-auto mx-auto">
            <LoadingCircle />
        </div>
    </div>
}

@code {
    private ObservableCollection<EquipmentResponse>? equipments;
    private EmployeeResponse? employee;
    [Parameter]
    [SupplyParameterFromQuery(Name = "id")]
    public Guid EmployeeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        if (equipments is not null)
            equipments.CollectionChanged += (s, e) => StateHasChanged();
    }

    private async Task LoadDataAsync()
    {
        employee = await EmployeeService.GetByIdAsync(EmployeeId);
        var equipmentResponse = await EquipmentService.GetByEmployeeIdAsync(EmployeeId);
        if (equipmentResponse is not null)
            equipments = new ObservableCollection<EquipmentResponse>(equipmentResponse);

    }
}
