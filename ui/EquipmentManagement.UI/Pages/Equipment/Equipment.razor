@page "/equipment/"
@using EquimentManagement.Contracts.Responses;
@using EquipmentManagement.UI.Abstractions;
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Client;
@inject IEquipmentService EquipmentService;
@inject IStatusService StatusService;
@inject NavigationManager Navigation;
@attribute [Authorize]
<h3>Equipment</h3>

<div class="navbar-dark">
    <AuthorizeView Roles="Admin">
        <Authorized>
            <NavLink class="btn btn-primary"
                     href="/equipment/add">Добавить оборудование</NavLink>
        </Authorized>
    </AuthorizeView>

</div>
   @if (equipments is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    <span>Тип</span>
                </th>
                <th>
                    <span>Артикул</span>
                </th>
                <th>
                    <span>Серийный номер</span>
                </th>
                <th>
                    <span>Описание</span>
                </th>
                <th>
                    <span>Статус</span>
                </th>
                <th>

                </th>
            </tr>
        </thead>
        <tbody>

            @foreach (var equipment in equipments)
            {
                <tr>
                    <td>
                        <span>@equipment.Type</span>
                    </td>
                    <td>
                        <span>@equipment.Article</span>
                    </td>
                    <td>
                        <span>@equipment.SerialNumber</span>
                    </td>
                    <td>
                        <textarea draggable="false"
                                  readonly="readonly">@equipment.Description</textarea>
                    </td>
                    <td>
                        <strong>@equipment.StatusTitle</strong>
                        @if (equipment.EmployeeFullname is not null)
                        {
                            <span> (@equipment.EmployeeFullname)</span>
                        }
                    </td>
                    <td>
                        <AuthorizeView Roles="Admin">
                            <Authorized>
                                <button class="btn btn-danger">Удалить</button>
                                <button class="btn btn-primary"
                                @onclick="() => EditEquipmentStatus(equipment.Id)">
                                    Изменить статус
                                </button>
                            </Authorized>
                        </AuthorizeView>
                        <button class="btn btn-primary"
                        @onclick="() => ShowHistory(equipment.Id)">История</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="d-flex">
        <div class="my-auto mx-auto">
            <LoadingCircle />
        </div>
    </div>
}
@code {
    private IEnumerable<EquipmentWithStatusResponse>? equipments;

    protected override async Task OnInitializedAsync()
    {
        await LoadEquipments();
    }

    private async Task LoadEquipments()
    {
        equipments = await EquipmentService.GetAllAsync();

    }

    private void EditEquipmentStatus(Guid equipmentId)
    {
        Navigation.NavigateTo($"/record/edit?id={equipmentId}");
    }
    private void ShowHistory(Guid equipmentId)
    {
        Navigation.NavigateTo($"/equipment/history?id={equipmentId}");
    }
}
