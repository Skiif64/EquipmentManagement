@attribute [Route(PagePaths.Equipment.List)]
@using EquimentManagement.Contracts.Responses;
@using EquipmentManagement.UI.Abstractions;
@using EquipmentManagement.UI.Shared.Modal;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Collections.ObjectModel;
@inject HttpClient Client;
@inject IEquipmentService EquipmentService;
@inject IStatusService StatusService;
@inject NavigationManager Navigation;
@attribute [Authorize]
<h3>Оборудование</h3>

<div class="navbar-dark">
    <AuthorizeView Roles="Admin">
        <Authorized>
            <NavLink class="btn btn-primary"
                     href="/equipment/add">Добавить оборудование</NavLink>
        </Authorized>
    </AuthorizeView>

</div>
   @if (equipments is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    <span>Тип</span>
                </th>
                <th>
                    <span>Артикул</span>
                </th>
                <th>
                    <span>Серийный номер</span>
                </th>
                <th>
                    <span>Описание</span>
                </th>
                <th>
                    <span>Статус</span>
                </th>
                <th>

                </th>
            </tr>
        </thead>
        <tbody>

            @foreach (var equipment in equipments)
            {
                <tr>
                    <td>
                        <span>@equipment.Type</span>
                    </td>
                    <td>
                        <span>@equipment.Article</span>
                    </td>
                    <td>
                        <span>@equipment.SerialNumber</span>
                    </td>
                    <td>
                        <textarea draggable="false"
                                  readonly="readonly">@equipment.Description</textarea>
                    </td>
                    <td>
                        <strong>@equipment.StatusTitle</strong>
                        @if (equipment.EmployeeFullname is not null)
                        {
                            <span> (@equipment.EmployeeFullname)</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-primary"
                        @onclick="() => ShowDetailsAsync(equipment)">Детали</button>
                        <AuthorizeView Roles="Admin">
                            <Authorized>
                                <button class="btn btn-danger"
                                @onclick="() => ShowDeleteAsync(equipment)">Удалить</button>
                                <button class="btn btn-primary"
                                @onclick="() => EditEquipmentStatus(equipment.Id)">
                                    Изменить статус
                                </button>
                            </Authorized>
                        </AuthorizeView>
                        <button class="btn btn-primary"
                        @onclick="() => ShowHistory(equipment.Id)">История</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="d-flex">
        <div class="my-auto mx-auto">
            <LoadingCircle />
        </div>
    </div>
}
@code {
    private ObservableCollection<EquipmentWithStatusResponse> equipments = new();
    private EquipmentWithStatusResponse? selected;
    [CascadingParameter]
    private IModalService Modal { get; set; } = null!;
    protected override async Task OnInitializedAsync()
    {
        await LoadEquipments();
        equipments.CollectionChanged += (s, e) => StateHasChanged();
    }

    private async Task LoadEquipments()
    {
        var response = await EquipmentService.GetAllAsync();
        equipments = new ObservableCollection<EquipmentWithStatusResponse>(response);
    }

    private void EditEquipmentStatus(Guid equipmentId)
    {
        Navigation.NavigateTo($"{PagePaths.EquipmentRecord.Add}?id={equipmentId}");
    }
    private void ShowHistory(Guid equipmentId)
    {
        Navigation.NavigateTo($"{PagePaths.EquipmentRecord.History}?id={equipmentId}");
    }

    private async Task ShowDeleteAsync(EquipmentWithStatusResponse equipment)
    {
        selected = equipment;
        var options = new ModalOptions
            {
                HideCloseButton = true
            };
        var parameters = new ModalParameters()
        .Add(nameof(DeleteModal.EntityName), equipment.Type);
        var modal = Modal.Show<DeleteModal>("Удаление оборудования", parameters, options);
        var result = await modal.Result;
        if(result.Confirmed)
        {
            await DeleteSelectedEquipmentAsync();
        }
    }

    private async Task DeleteSelectedEquipmentAsync()
    {
        if (selected is null)
            return;
        equipments?.Remove(selected);
        var employeeId = selected.Id;
        selected = null;
    }

    private async Task ShowDetailsAsync(EquipmentWithStatusResponse equipment)
    {
        var parameters = new ModalParameters()
        .Add(nameof(EquipmentModal.Equipment), equipment);
        var modal = Modal.Show<EquipmentModal>("Детали", parameters);
        var result = await modal.Result;
    }
}
