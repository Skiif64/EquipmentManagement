@using EquimentManagement.Contracts.Responses;
@using System.Collections.ObjectModel;
@using EquipmentManagement.UI.Abstractions;
@inject IEquipmentService EquipmentService;
@attribute [Authorize]
@if (equipments is not null)
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    <span>Тип</span>
                </th>
                <th>
                    <span>Артикул</span>
                </th>
                <th>
                    <span>Серийный номер</span>
                </th>
                <th>
                    <span>Описание</span>
                </th>
                <th>
                    <span>Действия</span>
                </th>
            </tr>
        </thead>
        <tbody>

            @foreach (var equipment in equipments)
            {
                <tr>
                    <td>
                        <span>@equipment.Type</span>
                    </td>
                    <td>
                        <span>@equipment.Article</span>
                    </td>
                    <td>
                        <span>@equipment.SerialNumber</span>
                    </td>
                    <td>
                        <textarea readonly="readonly">@equipment.Description</textarea>
                    </td>
                    <td>
                        <button class="btn btn-primary"
                        @onclick="async () => await DetachRequested.InvokeAsync(equipment)">
                            <span>Снять</span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="d-flex">
        <div class="my-auto mx-auto">
            <LoadingCircle />
        </div>
    </div>
}
@code {
    private ObservableCollection<EquipmentResponse>? equipments;
    [Parameter]
    public Guid EmployeeId { get; set; }
    [Parameter]
    public EventCallback<EquipmentResponse> DetachRequested { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    public async Task ReloadAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        var equipmentResponse = await EquipmentService.GetByEmployeeIdAsync(EmployeeId);
        if (equipmentResponse is not null)
        {
            equipments = new ObservableCollection<EquipmentResponse>(equipmentResponse);
            equipments.CollectionChanged += (s, e) => StateHasChanged();
        }
    }
}
