@using System.Collections.ObjectModel;
@using EquimentManagement.Contracts.Responses;
@using EquipmentManagement.UI.Abstractions;
@inject IEquipmentService EquipmentService;
@inject IEquipmentTypeService EquipmentTypeService;
@attribute [Authorize]
@if (equipments is not null)
{
    <div class="input-group rounded">
        <div class="d-flex flex-row">
            <span class="input-group-text border-0" id="search-addon">
                <i class="oi oi-magnifying-glass"></i>
            </span>
            <input type="search" class="form-control rounded" placeholder="Поиск" aria-label="Search" aria-describedby="search-addon"
            @oninput="OnSearchBarInput" />
        </div>
        <div class="d-flex flex-row">
            <span class="input-group-text border-0">
                <i class="oi oi-list"></i>
            </span>
            <InputSelect type="search" class="form-control rounded" @bind-Value="searchType">
                <option value="" selected hidden>Фильтр по типу</option>
                @if (equipmentTypes is not null)
                {
                    foreach (var type in equipmentTypes)
                    {
                        <option value="@type.Name">@type.Name</option>
                    }
                }
            </InputSelect>
        </div>
    </div>
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    <span>Тип</span>
                </th>
                <th>
                    <span>Артикул</span>
                </th>
                <th>
                    <span>Серийный номер</span>
                </th>
                <th>
                    <span>Описание</span>
                </th>
                <th>
                    <span>Статус</span>
                </th>
                <th>

                </th>
            </tr>
        </thead>
        <tbody>

            @foreach (var equipment in equipments.Where(EquipmentTypeSearchSelector).Where(EquipmentSearchSelector))
            {
                <tr>
                    <td>
                        <span>@equipment.Type</span>
                    </td>
                    <td>
                        <span>@equipment.Article</span>
                    </td>
                    <td>
                        <span>@equipment.SerialNumber</span>
                    </td>
                    <td>
                        <textarea draggable="false"
                                  readonly="readonly">@equipment.Description</textarea>
                    </td>
                    <td>
                        <strong>@equipment.StatusTitle</strong>
                        @if (equipment.EmployeeFullname is not null)
                        {
                            <span> (@equipment.EmployeeFullname)</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-primary"
                        @onclick="async () => await DetailsRequested.InvokeAsync(equipment)">
                            <span class="oi oi-info"></span> Детали
                        </button>
                        <AuthorizeView Roles="Admin">
                            <Authorized>
                                <button class="btn btn-primary"
                                @onclick="async() => await EditRequested.InvokeAsync(equipment)">
                                    <span class="oi oi-pencil"></span> Изменить статус
                                </button>
                                <button class="btn btn-primary"
                                @onclick="async() => await EditEquipmentRequested.InvokeAsync(equipment)">
                                    <span class="oi oi-pencil"></span> Изменить
                                </button>
                            </Authorized>
                        </AuthorizeView>
                        <button class="btn btn-primary"
                        @onclick="async () => await HistoryRequested.InvokeAsync(equipment)">
                            <span class="oi oi-list-rich"></span> История
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="d-flex">
        <div class="my-auto mx-auto">
            <LoadingCircle />
        </div>
    </div>
}

@code {
    private string? searchQuery;
    private string? searchType;
    private ObservableCollection<EquipmentWithStatusResponse>? equipments;
    private IEnumerable<EquipmentTypeResponse>? equipmentTypes;
    [Parameter]
    public EventCallback<EquipmentWithStatusResponse> EditRequested { get; set; } = default!;
    [Parameter]
    public EventCallback<EquipmentWithStatusResponse> HistoryRequested { get; set; } = default!;
    [Parameter]
    public EventCallback<EquipmentWithStatusResponse> DetailsRequested { get; set; } = default!;
    [Parameter]
    public EventCallback<EquipmentWithStatusResponse> EditEquipmentRequested { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadEquipments();
        await LoadEquipmentTypes();
    }

    public void DeleteEquipment(EquipmentWithStatusResponse equipment)
    {
        equipments?.Remove(equipment);
    }

    private async Task LoadEquipments()
    {
        var response = await EquipmentService.GetAllAsync();
        if (response is not null)
        {
            equipments = new ObservableCollection<EquipmentWithStatusResponse>(response);
            equipments.CollectionChanged += (s, e) => StateHasChanged();
        }
    }

    private async Task LoadEquipmentTypes()
    {
        var response = await EquipmentTypeService.GetAllAsync();
        if (response is not null)
        {
            equipmentTypes = response;
        }
    }

    private void OnSearchBarInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString();
    }

    private bool EquipmentTypeSearchSelector(EquipmentWithStatusResponse equipment)
    {
        if (string.IsNullOrWhiteSpace(searchType))
            return true;

        return equipment.Type == searchType;
    }

    private bool EquipmentSearchSelector(EquipmentWithStatusResponse equipment)
    {
        var query = searchQuery ?? string.Empty;
        const StringComparison comparsion = StringComparison.InvariantCultureIgnoreCase;

        if (equipment.Article.Contains(query, comparsion))
            return true;
        if (equipment.SerialNumber.Contains(query, comparsion))
            return true;
        if (equipment.EmployeeFullname?.Contains(query, comparsion) ?? false)
            return true;
        if (equipment.Description?.Contains(query, comparsion) ?? false)
            return true;

        return false;
    }
}