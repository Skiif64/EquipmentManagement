@inherits PagedTableBase<EquipmentResponse>
@using System.Collections.ObjectModel;
@using EquimentManagement.Contracts.Responses;
@using EquipmentManagement.UI.Abstractions;
@using EquipmentManagement.UI.Models;
@inject IEquipmentService EquipmentService;
@inject IEquipmentTypeService EquipmentTypeService;
@inject IStatusService statusService;
@attribute [Authorize]

<div class="input-group rounded">
    <div class="d-flex flex-row mt-3">
        <span class="input-group-text border-0" id="search-addon">
            <i class="oi oi-magnifying-glass"></i>
        </span>
        <input type="search" class="form-control rounded" placeholder="Поиск" aria-label="Search" aria-describedby="search-addon"
               @oninput="OnSearchBarInput" />
    </div>
    <div class="d-block w-100 mt-3 border-top border-1">
    </div>
    <EditForm Model="@searchModel">
        <div class="d-flex flex-row mt-3">
            <span>Фильтры</span>
            <span class="input-group-text border-0 mx-3">
                Тип
            </span>
            <InputSelect type="search" class="form-control rounded m-width-200" @bind-Value="searchModel!.TypeName">
                <option value="" selected>Нет</option>
                @if (equipmentTypes is not null)
                {
                    foreach (var type in equipmentTypes)
                    {
                        <option value="@type.Name">@type.Name</option>
                    }
                }
            </InputSelect>
            <span class="input-group-text border-0 mx-3">
                Статус
            </span>
            <InputSelect type="search" class="form-control rounded m-width-200" @bind-Value="searchModel!.StatusTitle">
                <option value="" selected>Нет</option>
                @if (statuses is not null)
                {
                    foreach (var status in statuses)
                    {
                        <option value="@status.Title">@status.Title</option>
                    }
                }
            </InputSelect>
        </div>
    </EditForm>
</div>
@if (PagedList is not null)
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>
                    <span>Тип</span>
                </th>
                <th>
                    <span>Артикул</span>
                </th>
                <th>
                    <span>Серийный номер</span>
                </th>
                <th>
                    <span>Описание</span>
                </th>
                <th>
                    <span>Статус</span>
                </th>
                <th>

                </th>
            </tr>
        </thead>
        <tbody>

            @foreach (var equipment in PagedList.Items
           .Where(EquipmentTypeSearchSelector)
           .Where(EquipmentStatusSearchSelector)
           .Where(EquipmentSearchSelector))
            {
                <tr>
                    <td>
                        <span>@equipment.Type</span>
                    </td>
                    <td>
                        <span>@equipment.Article</span>
                    </td>
                    <td>
                        <span>@equipment.SerialNumber</span>
                    </td>
                    <td>
                        <textarea draggable="false"
                                  readonly="readonly">@equipment.Description</textarea>
                    </td>
                    <td>
                        <strong>@equipment.CurrentStatusTitle</strong>
                        @if (equipment.EmployeeFullname is not null)
                        {
                            <span> (@equipment.EmployeeFullname)</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-primary"
                        @onclick="async () => await DetailsRequested.InvokeAsync(equipment)">
                            <span class="oi oi-info"></span> Детали
                        </button>
                        <AuthorizeView Roles="Admin">
                            <Authorized>
                                <button class="btn btn-primary"
                                @onclick="async() => await EditRequested.InvokeAsync(equipment)">
                                    <span class="oi oi-pencil"></span> Изменить статус
                                </button>
                                <button class="btn btn-primary"
                                @onclick="async() => await EditEquipmentRequested.InvokeAsync(equipment)">
                                    <span class="oi oi-pencil"></span> Изменить
                                </button>
                            </Authorized>
                        </AuthorizeView>
                        <button class="btn btn-primary"
                        @onclick="async () => await HistoryRequested.InvokeAsync(equipment)">
                            <span class="oi oi-list-rich"></span> История
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <nav aria-label="page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @(PagedList?.Page == 1? "disabled" : "")">
                <a class="page-link" tabindex="-1" @onclick=OnPreviousPageClicked>Назад</a>
            </li>
            <li class="page-item"><a class="page-link">@PagedList?.Page</a></li>
            <li class="page-item">
                <a class="page-link @((PagedList?.IsLastPage ?? false)? "disabled" : "")"
                @onclick=OnNextPageClicked>Дальше</a>
            </li>
        </ul>
    </nav>
}
else
{
    <div class="d-flex">
        <div class="my-auto mx-auto">
            <LoadingCircle />
        </div>
    </div>
}


@code {
    private const int PageSize = 6;

    private string? searchQuery;
    private SearchEquipmentModel searchModel = new();

    private IEnumerable<EquipmentTypeResponse>? equipmentTypes;
    private IEnumerable<StatusResponse>? statuses;
    [Parameter]
    public EventCallback<EquipmentResponse> EditRequested { get; set; } = default!;
    [Parameter]
    public EventCallback<EquipmentResponse> HistoryRequested { get; set; } = default!;
    [Parameter]
    public EventCallback<EquipmentResponse> DetailsRequested { get; set; } = default!;
    [Parameter]
    public EventCallback<EquipmentResponse> EditEquipmentRequested { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        await OnPageLoad();
        await LoadEquipmentTypes();
        await LoadStatuses();
    }

    protected override async Task OnPageLoad(int page = 1)
    {
        PagedList = null;
        PagedList = await EquipmentService.GetAsync(page, PageSize);
    }

    private async Task LoadEquipmentTypes()
    {
        var response = await EquipmentTypeService.GetAllAsync();
        if (response is not null)
        {
            equipmentTypes = response;
        }
    }

    private async Task LoadStatuses()
    {
        var response = await statusService.GetAll();
        if (response is not null)
        {
            statuses = response;
        }
    }

    private void OnSearchBarInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString();
    }

    private bool EquipmentTypeSearchSelector(EquipmentResponse equipment)
    {
        if (string.IsNullOrWhiteSpace(searchModel!.TypeName))
            return true;

        return equipment.Type == searchModel!.TypeName;
    }

    private bool EquipmentStatusSearchSelector(EquipmentResponse equipment)
    {
        if (string.IsNullOrWhiteSpace(searchModel!.StatusTitle))
            return true;

        return equipment.CurrentStatusTitle == searchModel!.StatusTitle;
    }

    private bool EquipmentSearchSelector(EquipmentResponse equipment)
    {
        var query = searchQuery ?? string.Empty;
        const StringComparison comparsion = StringComparison.InvariantCultureIgnoreCase;

        if (equipment.Type.Contains(query, comparsion))
            return true;
        if (equipment.CurrentStatusTitle?.Contains(query, comparsion) ?? false)
            return true;
        if (equipment.Article.Contains(query, comparsion))
            return true;
        if (equipment.SerialNumber.Contains(query, comparsion))
            return true;
        if (equipment.EmployeeFullname?.Contains(query, comparsion) ?? false)
            return true;
        if (equipment.Description?.Contains(query, comparsion) ?? false)
            return true;

        return false;
    }

    private class SearchEquipmentModel
    {
        public string TypeName { get; set; } = string.Empty;
        public string StatusTitle { get; set; } = string.Empty;
    }
}